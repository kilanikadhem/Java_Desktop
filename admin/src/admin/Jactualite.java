/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package admin;

import JDBC.Connect;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.beans.Beans;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.RollbackException;
import javax.swing.JFrame;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.JPanel;

/**
 *
 * @author kadhem
 */
public class Jactualite extends JPanel {
     ResultSet rs=null;
    ResultSet rs2=null;
    PreparedStatement ps=null;
    int ligne;
    public Jactualite() {
        initComponents();
        if (!Beans.isDesignTime()) {
            entityManager.getTransaction().begin();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("adminPU").createEntityManager();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT a FROM Actualite a");
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        titreARactualiteLabel = new javax.swing.JLabel();
        titreFRactualiteLabel = new javax.swing.JLabel();
        textARactualiteLabel = new javax.swing.JLabel();
        textFRactualiteLabel = new javax.swing.JLabel();
        titreARactualiteField = new javax.swing.JTextField();
        titreFRactualiteField = new javax.swing.JTextField();
        textARactualiteField = new javax.swing.JTextField();
        textFRactualiteField = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();

        FormListener formListener = new FormListener();

        setLayout(null);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idActualite}"));
        columnBinding.setColumnName("Id Actualite");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${titreARactualite}"));
        columnBinding.setColumnName("Titre ARactualite");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${titreFRactualite}"));
        columnBinding.setColumnName("Titre FRactualite");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${textARactualite}"));
        columnBinding.setColumnName("Text ARactualite");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${textFRactualite}"));
        columnBinding.setColumnName("Text FRactualite");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);

        masterTable.addMouseListener(formListener);
        masterScrollPane.setViewportView(masterTable);

        add(masterScrollPane);
        masterScrollPane.setBounds(120, 60, 569, 172);

        titreARactualiteLabel.setText("Titre ARactualite:");
        add(titreARactualiteLabel);
        titreARactualiteLabel.setBounds(10, 250, 84, 14);

        titreFRactualiteLabel.setText("Titre FRactualite:");
        add(titreFRactualiteLabel);
        titreFRactualiteLabel.setBounds(10, 280, 83, 14);

        textARactualiteLabel.setText("Text ARactualite:");
        add(textARactualiteLabel);
        textARactualiteLabel.setBounds(10, 330, 84, 14);

        textFRactualiteLabel.setText("Text FRactualite:");
        add(textFRactualiteLabel);
        textFRactualiteLabel.setBounds(10, 360, 83, 14);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.titreARactualite}"), titreARactualiteField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), titreARactualiteField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        titreARactualiteField.addActionListener(formListener);
        add(titreARactualiteField);
        titreARactualiteField.setBounds(100, 240, 481, 30);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.titreFRactualite}"), titreFRactualiteField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), titreFRactualiteField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        add(titreFRactualiteField);
        titreFRactualiteField.setBounds(100, 280, 481, 30);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.textARactualite}"), textARactualiteField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), textARactualiteField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        add(textARactualiteField);
        textARactualiteField.setBounds(100, 320, 481, 30);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.textFRactualite}"), textFRactualiteField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), textFRactualiteField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        add(textFRactualiteField);
        textFRactualiteField.setBounds(100, 360, 481, 30);

        saveButton.setText("enregistrer");
        saveButton.addActionListener(formListener);
        add(saveButton);
        saveButton.setBounds(610, 400, 90, 23);

        refreshButton.setText("Actualiser");
        refreshButton.addActionListener(formListener);
        add(refreshButton);
        refreshButton.setBounds(520, 400, 79, 23);

        newButton.setText("Ajouter");
        newButton.addActionListener(formListener);
        add(newButton);
        newButton.setBounds(360, 400, 71, 23);

        deleteButton.setText("Effacer");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), deleteButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        deleteButton.addActionListener(formListener);
        add(deleteButton);
        deleteButton.setBounds(440, 400, 71, 23);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/META-INF/finances2.png"))); // NOI18N
        add(jLabel5);
        jLabel5.setBounds(0, 10, 120, 73);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/META-INF/fianances.png"))); // NOI18N
        add(jLabel4);
        jLabel4.setBounds(0, 80, 113, 143);
        add(jSeparator1);
        jSeparator1.setBounds(240, 10, 0, 2);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/META-INF/1458320500_Home01.png"))); // NOI18N
        jButton1.addActionListener(formListener);
        add(jButton1);
        jButton1.setBounds(610, 10, 65, 41);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("القباضـة الماليّـة شارع محمّد معروف بسوســة");
        jLabel6.setToolTipText("");
        add(jLabel6);
        jLabel6.setBounds(260, 30, 259, 15);

        jLabel2.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Recette des finances Av. Med. Mâarouf ");
        add(jLabel2);
        jLabel2.setBounds(250, 10, 306, 17);

        DateFormat dateFormat = new SimpleDateFormat("ddMMMyyyy",Locale.FRANCE);
        Calendar cal = Calendar.getInstance();
        String s=dateFormat.format(cal.getTime());
        jLabel3.setText(s);
        add(jLabel3);
        jLabel3.setBounds(20, 410, 66, 14);
        add(jSeparator2);
        jSeparator2.setBounds(180, 50, 410, 20);

        bindingGroup.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.MouseListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == titreARactualiteField) {
                Jactualite.this.titreARactualiteFieldActionPerformed(evt);
            }
            else if (evt.getSource() == saveButton) {
                Jactualite.this.saveButtonActionPerformed(evt);
            }
            else if (evt.getSource() == refreshButton) {
                Jactualite.this.refreshButtonActionPerformed(evt);
            }
            else if (evt.getSource() == newButton) {
                Jactualite.this.newButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteButton) {
                Jactualite.this.deleteButtonActionPerformed(evt);
            }
            else if (evt.getSource() == jButton1) {
                Jactualite.this.jButton1ActionPerformed(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == masterTable) {
                Jactualite.this.masterTableMouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents

    
    @SuppressWarnings("unchecked")
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        entityManager.getTransaction().rollback();
        entityManager.getTransaction().begin();
        java.util.Collection data = query.getResultList();
        for (Object entity : data) {
            entityManager.refresh(entity);
        }
        list.clear();
        list.addAll(data);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int num=0;
        try {
             Connection con=Connect.conDB();
              int idgs= (int)masterTable.getValueAt(ligne, 0) ;
             String sql="SELECT COUNT(*) FROM s_actualite where id_actualite="+idgs;
             ps=con.prepareStatement(sql);
             rs = ps.executeQuery();
              while(rs.next()){
             num= rs.getInt(1);
              }
              if(num ==0){
             int[] selected = masterTable.getSelectedRows();
             List<admin.Actualite> toRemove = new ArrayList<admin.Actualite>(selected.length);
             for (int idx = 0; idx < selected.length; idx++) {
                 admin.Actualite a = list.get(masterTable.convertRowIndexToModel(selected[idx]));
                 toRemove.add(a);
                 entityManager.remove(a);
             }
             list.removeAll(toRemove);}
              else{showMessageDialog(null, "suppression Interdite.Cette actualite est lié a des sous actualites ");}
         } catch (SQLException ex) {
             Logger.getLogger(Jactualite.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        admin.Actualite a = new admin.Actualite();
        entityManager.persist(a);
        list.add(a);
        int row = list.size() - 1;
        masterTable.setRowSelectionInterval(row, row);
        masterTable.scrollRectToVisible(masterTable.getCellRect(row, 0, true));
    }//GEN-LAST:event_newButtonActionPerformed
    
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
         if((titreARactualiteField.getText().length()!=0) && (titreFRactualiteField.getText().length()!=0)&& (textARactualiteField.getText().length()!=0)&& (textFRactualiteField.getText().length()!=0)){
        try {
            entityManager.getTransaction().commit();
            entityManager.getTransaction().begin();
        } catch (RollbackException rex) {
            rex.printStackTrace();
            entityManager.getTransaction().begin();
            List<admin.Actualite> merged = new ArrayList<admin.Actualite>(list.size());
            for (admin.Actualite a : list) {
                merged.add(entityManager.merge(a));
            }
            list.clear();
            list.addAll(merged);
        }}
         else{showMessageDialog(null, "Tous les champs sont obligatoire"); }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JPrincipale p=new JPrincipale();

        p.getContentPane().setPreferredSize(new Dimension(650,400));
        p.pack();
        p.setVisible(true);
        p.setLocationRelativeTo(null);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void titreARactualiteFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titreARactualiteFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_titreARactualiteFieldActionPerformed

    private void masterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_masterTableMouseClicked
        ligne= masterTable.getSelectedRow();
    }//GEN-LAST:event_masterTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private java.util.List<admin.Actualite> list;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private javax.swing.JButton newButton;
    private javax.persistence.Query query;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField textARactualiteField;
    private javax.swing.JLabel textARactualiteLabel;
    private javax.swing.JTextField textFRactualiteField;
    private javax.swing.JLabel textFRactualiteLabel;
    private javax.swing.JTextField titreARactualiteField;
    private javax.swing.JLabel titreARactualiteLabel;
    private javax.swing.JTextField titreFRactualiteField;
    private javax.swing.JLabel titreFRactualiteLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Jactualite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Jactualite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Jactualite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Jactualite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame();
                frame.setContentPane(new Jactualite());
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.pack();
                frame.setVisible(true);
            }
        });
    }
    
}
